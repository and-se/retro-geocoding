from pyparsing import ParserElement
from geoparsing.geoparser import Geo, set_debug_names

def get_test_data():
    def _test_item_transformer(x):
        if "<" in x:
            return x
        elif x.startswith("!!!"):
            return x[3:]
        else:
            return "<" + x + ">"

    # Проставим границы гео-названий в тестовых данных, где их нет
    return list(map(_test_item_transformer, test_data))


def run_tests(verbose):
    tests = get_test_data()

    failures = []
    for i in tests:
        i, expected = _parse_test_item(i)
        fact = []
        for g in Geo.scanString(i):
            p, s, e = g
            if verbose:
                p = p.asDict()
                print(i[:s] + "<" + i[s:e] + ">" + i[e:])
                print(p)
                print()
            fact.append((s, e))
        if expected != fact:
            err = _highlight_error(i, expected, fact)
            failures.append(err)
    return len(tests), failures


def _parse_test_item(s):
    r = []
    li = -1
    shift = 0
    while True:
        try:
            li = s.index("<", li + 1)
        except ValueError:
            break
        else:
            ri = s.index(">", li)
            r.append((li - shift, ri - shift - 1))
            shift += 2
    return s.replace("<", '').replace(">", ''), r


def _build_string_marks(expected, fact):
    marks = []
    for s, e in expected:
        marks.append((s, "<"))
        marks.append((e, ">"))

    for s, e in fact:
        marks.append((s, "{"))
        marks.append((e, "}"))

    # При попадании нескольких скобок в одно место
    # сначала рисуем закрывающие, а затем открывающие
    # (у нас парсер достаёт данные без пересечений, так что это случается
    # тогда, когда парсер выдал два совпадения без зазора)
    # Также делаем так, чтобы <> были снаружи
    brackets_order = "}><{"

    # Аккуратно сортируем в порядке возрастания номеров символов,
    # а в случае совпадения символов аккуратно разруливаем порядок
    # скобок как описано в k2_order
    return sorted(marks, key=lambda x: (x[0], brackets_order.index(x[1])))


def _highlight_error(s, expected, fact):
    marks = _build_string_marks(expected, fact)
    i = 0
    r = ""
    for pos, symbol in marks:
        r += s[i:pos] + symbol
        i = pos

    r += s[i:]
    # print(s)
    # print("Expected", expected)
    # print("Fact", fact)
    # print(str(s) + "\n" + str(marks))
    return r


# Тестовые данные
# Гео-названия надо заключать в < >. Если вся строка является гео-названием, можно этого не делать.
# Если в строке нет гео-названий, надо в её начале написать !!!
test_data = [
    "Родился в <с. Болотино Стерлитамакского уезда Уфимской губ. (ныне Аургазинский р-н Башкирии).>",
    "После освобождения проживала в <с. Корсино>, трудилась в колхозе.",
    "Впоследствии проживал в <с. Митрофановка Дуванского р-на Башкирской АССР (ныне Республика Башкортостан).>",
    "Проживал в <г. Ораниенбауме (г. Ломоносов) Ленинградской обл.>, работал дворником.",
    "Трудник Свято-Троицкого Варницкого мужского монастыря в <г. Ростове Великом.>",
    "Родился в <с. Русская Беденьга Симбирского уезда Симбирской губ.>",
    "Арзамасский уезд Нижегородской губ. (ныне Дивеевский р-н Нижегородской обл.).",
    "Кокчетавская обл. Казахской ССР",
    "Каменский завод Камышловского уезда Пермской губ.",
    "Иванов <слоб. Починки Починковского уезда>",
    "С.-Петербург",
    "С.-Петербург.",
    "С.-Петербургская губ.",
    "с. М. Поляны Больше-Маресевского р-на Горьковской обл.",
    "г. Ростов Великий",
    "Башкирия",
    "Казахстан",
    "Абхазия.",
    "Эпилог. <Москва >2020",
    "Эпилог. <Москва>, 2020",
    "с. Покровское (ныне Республика Саха)",
    "Кладбище Балино в г. Иваново.",
    "Старое Никольское кладбище г. Загорска Московской обл. (ныне г. Сергиев Посад Московской обл.).",
    "Алма-Ата (Казахстан)",
    "г. Глазов Вятской губ. (ныне Республика Удмуртия).",
    "Удмуртия",
    "Республика Удмуртия",
    "Дмитриевский погост с. Лялино-Литвиново Кольчугинского р-на Владимирской обл.",
    "с. Бело-Безводное Казанско-Пригородного района Татарской АССР (ныне Зеленодольский р-н, Республика Татарстан).",
    "с. Белая Сорока, ныне Наровлянского р-на Гомельской обл.",
    "с. Березовка Сердобского уезда Саратовской губ., ныне Колышлейского р-на Пензенской обл.",
    "Коми  АО (ныне Республика Коми).",
    "Станица Ново-Павловская Терского округа Северо-Кавказского края " +
    "(ныне г. Новопавловск Кировского р-на Ставропольского края).",
    "Куйтунского р-на Иркутского округа Сибирского края (ныне Иркутская обл.)",
    "<Куйтунского р-на >Иркутского округловно <Сибирского края (ныне Иркутская обл.)>",
    "!!!Иванова заводка",
    "<Иванова завод >ка",
    "<Иванов обл.>",
    "!!!уфис. Пупис",
    "<Куйтунского р-на >Иркутского оквругловно",
    "<Куйтунского р-на >Иркутского округловно",
    "прииск Незаметный близ ст. Б. Невер.",
    "С.-Иванов вол.",
    "Орсюжский наслег Западно-Кангальского улуса Якутского окр.",
    "г. Ростов-на-Дону",
    # "г.Ораниенбаум Санкт-Петербургской губ. (ныне г. Ломоносов Петродворцового р-на г. Санкт-Петербурга)",
    "пог. Даньково Холмского уезда Псковской обл. (ныне Андреапольский р-н Тверской обл.).",
    "2-м Покровском починке Бирского уезда Уфимской губ. (ныне Башкортостан).",
    "Заимка Актай близ г. Верхотурье Пермской губ. (ныне Свердловская обл.).",
    "Зауральная Роща близ г. Оренбурга.",
    # "Зауральная роща (г. Оренбург).",
    "Долина Псху близ хутора Ригза в Абхазии.",
    "Мариинский Посад Чебоксарского уезда.",
    "Перемиловская пустынь Муромского уезда.",
    "Петропавловская церковь пос. Вырица Ленинградской обл.",
    "Переволоцкий поселок Донецкой станицы Оренбургского уезда Оренбургской губ.",
    "Царское Село С.-Петербургской губ. (ныне г. Пушкин Пушкинского р-на С.-Петербурга).",
    "г. Усть-Цильма Коми (Зырян) АО.",
    "г. Благовещенск Амурской обл. Дальневосточного края (ныне Амурская обл.).",
    "пос. Щитниково Реутовского р-на (ныне в гор.округе Балашиха) Московской обл.",
    "г. Астрахань Сталинградского края (ныне областной центр).",
    "г. Инсаров Пензенской губ. (ныне г. Инсар в Мордовии)",
    "Пустошь Опихарка (Епихарка) Угличского уезда Ярославской губ. (ныне Угличский р-н Ярославской обл.).",
    "Хутор Зимняцкий Глазуновской станицы Усть-Медведицкого округа Области Войска Донского " +
    "(ныне Серафимовичский р-н Волгоградской обл.).",
    "г. Тьму-Тараканск (ныне Квадра-Гвадра Бумс облгв.)",
    "с. Карсовай, ныне респ. Удмуртия, Балезинский р-н",
    "с.Измайлово (ныне в составе г. Москвы",
    "с. Вознесенье Бологовского р-на Калининской (ныне Тверской) обл. (ныне часть дер. Дубровка)",
    "село Кандабулак Самарской губ. (ныне Сергиевского р-на Самарской обл.",
    "с. Нежданово Яранского уезда Вятской губ. (ныне Кировская о., Советский р.)",
    "с. Мячково Александровского р-на (Владимирской обл.)",
    "с. Б. Лучинское (Большелучинское) Юрьев-Польского р-на Ивановской (ныне Владимирской) обл",
    "Ивановская (Тульская) обл., Грязевецкий (ныне Красно-Белый р-н) район",
    "Липецкая (тмоаывлдтмаоывд) обл.",
    "с. Деяново Курмышского (ныне Пильненского) р-на Горьковской (ныне Нижегородской) обл.",
    "с. Николаевское (Никольское) (ныне вероятно Никольское, Томская обл., Кривошеинский р-н)",
    "о. Талабск (Залит), Псковский р-н, Псковская обл.",
    "с. Грязное (ныне Липецкая обл., Липецкий р-н)",
    "дер. Бело-Безводная (ныне респ. Татария, Зеленодольский р-н)",
    "Ивановка Курганской обл",
]


# test_data = test_data[-1:]

def tests_ui(verbose):
    total, failures = run_tests(verbose)

    if failures:
        print("HAS ERRORS")
        print("< Expected substring >; { parser output }")
        print()
        for f in failures:
            print(f)
        print()
    print("Fail", len(failures))
    print("Total", total)


if __name__ == "__main__":
    import sys
    #tests_ui('verbose' in sys.argv)
    tests_ui(False)
